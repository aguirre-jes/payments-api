
# 1st stage, build the app
FROM container-registry.oracle.com/java/jdk-no-fee-term:24 AS build

WORKDIR /usr/share

# Install maven with integrity verification
ADD https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz /usr/share/
ADD https://archive.apache.org/dist/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz.sha512 /usr/share/

RUN set -x && \
    cd /usr/share && \
    echo "$(cat apache-maven-3.9.9-bin.tar.gz.sha512) apache-maven-3.9.9-bin.tar.gz" | sha512sum -c - && \
    tar -xvf apache-maven-3.9.9-bin.tar.gz && \
    rm apache-maven-3.9.9-bin.tar.gz apache-maven-3.9.9-bin.tar.gz.sha512 && \
    mv apache-maven-* maven && \
    ln -s /usr/share/maven/bin/mvn /bin/

WORKDIR /helidon

# Create a first layer to cache the "Maven World" in the local repository.
# Incremental docker builds will always resume after that, unless you update
# the pom
COPY pom.xml .
RUN mvn package -Dmaven.test.skip -Declipselink.weave.skip

# Do the Maven build to create the custom Java Runtime Image
# Incremental docker builds will resume here when you change sources
COPY src src
RUN mvn package -Pjlink-image -DskipTests \
  -Djlink.image.addClassDataSharingArchive=false \
  -Djlink.image.testImage=false && \
  echo "done!"

# 2nd stage, build the final image with the JRI built in the 1st stage
FROM gcr.io/distroless/static-debian12:latest-amd64

WORKDIR /helidon

COPY --from=build /helidon/target/payments-api-mp-jri ./

ENTRYPOINT ["/helidon/bin/java", \
  # G1 is already active by default, but you can specify it explicitly
  "-XX:+UseG1GC", \
  # Adjust for more predictable latency
  "-XX:MaxGCPauseMillis=100", \
  # Set fixed sizes to avoid costly resizing
  "-Xms256m", \
  "-Xmx256m", \
  # Other tuning parameters
  "-XX:+ParallelRefProcEnabled", \
  "-jar", "/helidon/app/payments-api-mp.jar"]

EXPOSE 8080